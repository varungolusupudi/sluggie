import * as IsEntitledEvaluators from '../is-entitled.evaluator';
import * as FeatureFlagEvalutor from '../../feature-flags/feature-flag.evaluator';
import * as AttributesUtils from '../attributes.utils';
import { TreatmentEnum } from '../../rules';
import { EntitlementResult, NotEntitledJustification, NO_EXPIRATION_TIME, UserEntitlementsContext } from '../types';
import { FeatureFlag } from '../../feature-flags/types';

const mockFeatureFlag: FeatureFlag = {
  on: true,
  defaultTreatment: TreatmentEnum.True,
  offTreatment: TreatmentEnum.False,
  rules: [],
};
const truthyEntitlementResult: EntitlementResult = {
  isEntitled: true,
};
const falsyEntitlementResultMissingFeature: EntitlementResult = {
  isEntitled: false,
  justification: NotEntitledJustification.MISSING_FEATURE,
};
const falsyEntitlementResultBundleExpired: EntitlementResult = {
  isEntitled: false,
  justification: NotEntitledJustification.BUNDLE_EXPIRED,
};
const falsyEntitlementResultMissingPermission: EntitlementResult = {
  isEntitled: false,
  justification: NotEntitledJustification.MISSING_PERMISSION,
};
describe('evaluateIsEntitledToFeature', () => {
  beforeAll(() => {
    jest.spyOn(AttributesUtils, 'prepareAttributes').mockReturnValue({ testAttribute: 'test-value' });
  });
  describe('entitled', () => {
    describe('feature-flag evaluated truthy', () => {
      beforeAll(async () => {
        jest.spyOn(FeatureFlagEvalutor, 'evaluateFeatureFlag').mockReturnValue({ treatment: TreatmentEnum.True });
      });

      test('feature granted with valid expiration date', async () => {
        const userEntitlementContext: UserEntitlementsContext = {
          features: {
            'test-feature': {
              expireTime: new Date().getTime() + 3600,
              linkedPermissions: [],
              featureFlag: mockFeatureFlag,
            },
          },
          permissions: {},
        };
        const result = IsEntitledEvaluators.evaluateIsEntitledToFeature('test-feature', userEntitlementContext, {});

        expect(result).toEqual(truthyEntitlementResult);
      });
      test('feature granted with expired expiration date', async () => {
        const userEntitlementContext: UserEntitlementsContext = {
          features: {
            'test-feature': {
              expireTime: new Date().getTime() - 3600,
              linkedPermissions: [],
              featureFlag: mockFeatureFlag,
            },
          },
          permissions: {},
        };
        const result = IsEntitledEvaluators.evaluateIsEntitledToFeature('test-feature', userEntitlementContext, {});

        expect(result).toEqual(truthyEntitlementResult);
      });
      test('feature granted with no expiration date', async () => {
        const userEntitlementContext: UserEntitlementsContext = {
          features: {
            'test-feature': {
              expireTime: NO_EXPIRATION_TIME,
              linkedPermissions: [],
              featureFlag: mockFeatureFlag,
            },
          },
          permissions: {},
        };
        const result = IsEntitledEvaluators.evaluateIsEntitledToFeature('test-feature', userEntitlementContext, {});

        expect(result).toEqual(truthyEntitlementResult);
      });
      test('feature has not been granted', async () => {
        const userEntitlementContext: UserEntitlementsContext = {
          features: {
            'test-feature': {
              expireTime: null,
              linkedPermissions: [],
              featureFlag: mockFeatureFlag,
            },
          },
          permissions: {},
        };
        const result = IsEntitledEvaluators.evaluateIsEntitledToFeature('test-feature', userEntitlementContext, {});

        expect(result).toEqual(truthyEntitlementResult);
      });
    });
    describe('feature-flag evaluated falsy', () => {
      beforeAll(async () => {
        jest.spyOn(FeatureFlagEvalutor, 'evaluateFeatureFlag').mockReturnValue({ treatment: TreatmentEnum.False });
      });
      test('feature granted with no expiration date', async () => {
        const userEntitlementContext: UserEntitlementsContext = {
          features: {
            'test-feature': {
              expireTime: NO_EXPIRATION_TIME,
              linkedPermissions: [],
              featureFlag: mockFeatureFlag,
            },
          },
          permissions: {},
        };
        const result = IsEntitledEvaluators.evaluateIsEntitledToFeature('test-feature', userEntitlementContext, {});

        expect(result).toEqual(truthyEntitlementResult);
      });
      test('feature granted with valid expiration date', async () => {
        const userEntitlementContext: UserEntitlementsContext = {
          features: {
            'test-feature': {
              expireTime: Date.now() + 3600,
              linkedPermissions: [],
              featureFlag: mockFeatureFlag,
            },
          },
          permissions: {},
        };
        const result = IsEntitledEvaluators.evaluateIsEntitledToFeature('test-feature', userEntitlementContext, {});

        expect(result).toEqual(truthyEntitlementResult);
      });
    });
    describe('no feature flag', () => {
      test('feature granted with no expiration date', async () => {
        const userEntitlementContext: UserEntitlementsContext = {
          features: {
            'test-feature': {
              expireTime: NO_EXPIRATION_TIME,
              linkedPermissions: [],
            },
          },
          permissions: {},
        };
        const result = IsEntitledEvaluators.evaluateIsEntitledToFeature('test-feature', userEntitlementContext, {});

        expect(result).toEqual(truthyEntitlementResult);
      });
      test('feature granted with valid expiration date', async () => {
        const userEntitlementContext: UserEntitlementsContext = {
          features: {
            'test-feature': {
              expireTime: Date.now() + 3600,
              linkedPermissions: [],
            },
          },
          permissions: {},
        };
        const result = IsEntitledEvaluators.evaluateIsEntitledToFeature('test-feature', userEntitlementContext, {});

        expect(result).toEqual(truthyEntitlementResult);
      });
    });
  });

  describe('not entitled', () => {
    describe('feature-flag evaluated falsy', () => {
      beforeAll(async () => {
        jest.spyOn(FeatureFlagEvalutor, 'evaluateFeatureFlag').mockReturnValue({ treatment: TreatmentEnum.False });
      });
      test('feature has not been granted', async () => {
        const userEntitlementContext: UserEntitlementsContext = {
          features: {
            'test-feature': {
              expireTime: null,
              linkedPermissions: [],
              featureFlag: mockFeatureFlag,
            },
          },
          permissions: {},
        };
        const result = IsEntitledEvaluators.evaluateIsEntitledToFeature('test-feature', userEntitlementContext, {});

        expect(result).toEqual(falsyEntitlementResultMissingFeature);
      });
      test('feature granted with expired expiration date', async () => {
        const userEntitlementContext: UserEntitlementsContext = {
          features: {
            'test-feature': {
              expireTime: Date.now() - 3600,
              linkedPermissions: [],
              featureFlag: mockFeatureFlag,
            },
          },
          permissions: {},
        };
        const result = IsEntitledEvaluators.evaluateIsEntitledToFeature('test-feature', userEntitlementContext, {});

        expect(result).toEqual(falsyEntitlementResultBundleExpired);
      });
    });

    describe('no feature', () => {
      test('feature does not exist', async () => {
        const userEntitlementContext: UserEntitlementsContext = {
          features: {},
          permissions: {},
        };
        const result = IsEntitledEvaluators.evaluateIsEntitledToFeature('test-feature', userEntitlementContext, {});

        expect(result).toEqual(falsyEntitlementResultMissingFeature);
      });
    });
  });
});

describe('evaluateIsEntitledToPermission', () => {
  describe('entitled', () => {
    test('permission granted, no linked feature/s to it', async () => {
      const userEntitlementContext: UserEntitlementsContext = {
        features: {},
        permissions: { 'test.permission': true },
      };
      const result = IsEntitledEvaluators.evaluateIsEntitledToPermissions(
        'test.permission',
        userEntitlementContext,
        {},
      );

      expect(result).toEqual(truthyEntitlementResult);
    });
    test('permission granted with linked feature/s, feature is entitled', async () => {
      jest.spyOn(IsEntitledEvaluators, 'evaluateIsEntitledToFeature').mockReturnValue({ isEntitled: true });

      const userEntitlementContext: UserEntitlementsContext = {
        features: { 'test-feature': { expireTime: NO_EXPIRATION_TIME, linkedPermissions: ['test.permission'] } },
        permissions: { 'test.permission': true },
      };

      const result = IsEntitledEvaluators.evaluateIsEntitledToPermissions(
        'test.permission',
        userEntitlementContext,
        {},
      );

      expect(result).toEqual(truthyEntitlementResult);
    });
  });

  describe('not entitled', () => {
    test('permission not granted', async () => {
      const userEntitlementContext: UserEntitlementsContext = {
        features: {},
        permissions: {},
      };
      const result = IsEntitledEvaluators.evaluateIsEntitledToPermissions(
        'test.permission',
        userEntitlementContext,
        {},
      );

      expect(result).toEqual(falsyEntitlementResultMissingPermission);
    });
    test('permission granted with linked feature/s, no feature is entiteld', async () => {
      jest
        .spyOn(IsEntitledEvaluators, 'evaluateIsEntitledToFeature')
        .mockReturnValue({ isEntitled: false, justification: NotEntitledJustification.MISSING_FEATURE });

      const userEntitlementContext: UserEntitlementsContext = {
        features: { 'test-feature': { expireTime: null, linkedPermissions: ['test.permission'] } },
        permissions: { 'test.permission': true },
      };

      const result = IsEntitledEvaluators.evaluateIsEntitledToPermissions(
        'test.permission',
        userEntitlementContext,
        {},
      );

      expect(result).toEqual(falsyEntitlementResultMissingFeature);
    });
    test('permission granted with linked feature/s, no feature is entiteld with expired bundle', async () => {
      jest
        .spyOn(IsEntitledEvaluators, 'evaluateIsEntitledToFeature')
        .mockReturnValue({ isEntitled: false, justification: NotEntitledJustification.BUNDLE_EXPIRED });
    });

    const userEntitlementContext: UserEntitlementsContext = {
      features: { 'test-feature': { expireTime: Date.now() - 3600, linkedPermissions: ['test.permission'] } },
      permissions: { 'test.permission': true },
    };

    const result = IsEntitledEvaluators.evaluateIsEntitledToPermissions('test.permission', userEntitlementContext, {});

    expect(result).toEqual(falsyEntitlementResultBundleExpired);
  });
});
