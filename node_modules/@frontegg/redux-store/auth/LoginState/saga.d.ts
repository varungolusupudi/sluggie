import { CallEffect } from 'redux-saga/effects';
import { ISamlMetadata, ResolvedTenantResult } from '@frontegg/rest-api';
import { AuthState } from '../interfaces';
export declare function refreshMetadata(): Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<AuthState>;
    type: string;
}> | CallEffect<ISamlMetadata>, void, ISamlMetadata & {
    isActive: boolean;
}>;
export declare function loadSSOPublicConfigurationFunction(): Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<AuthState>;
    type: string;
}> | CallEffect<import("@frontegg/rest-api").ISSOPublicConfiguration>, void, {
    isActive: any;
}>;
export declare function refreshToken(): Generator<import("redux-saga/effects").SelectEffect | CallEffect<any>, void, AuthState>;
export declare function refreshTokenForSocialLogins(): Generator<import("redux-saga/effects").SelectEffect | CallEffect<any>, void, AuthState>;
export declare function requestHostedLoginAuthorize(additionalParams?: Record<string, string>): Generator<any, void, {
    routes: any;
    context: any;
    onRedirectTo: any;
    urlStrategy: any;
} & string & ResolvedTenantResult>;
export declare function loginSagas(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
export { afterAuthNavigation } from './sagas/afterAuthNavigation.saga';
export { mfaWithAuthenticator } from './sagas/mfaWithAuthenticator.saga';
export declare function loginSagasMock(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
