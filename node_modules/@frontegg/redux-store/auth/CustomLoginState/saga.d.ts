import { CustomLoginState } from './interfaces';
import { AuthState } from '../interfaces';
export declare function loadTenantMetadata(): Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<CustomLoginState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<any>, void, any>;
export declare function customLoginEnabled(): Generator<import("redux-saga/effects").SelectEffect | import("@frontegg/rest-api").ResolvedTenantResult | Promise<import("@frontegg/rest-api").ResolvedTenantResult> | undefined, boolean, boolean>;
export declare function loadCustomLoginRoutes(): Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").PutEffect<{
    payload: Partial<CustomLoginState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<Generator<import("redux-saga/effects").SelectEffect | import("@frontegg/rest-api").ResolvedTenantResult | Promise<import("@frontegg/rest-api").ResolvedTenantResult> | undefined, boolean, boolean>> | import("redux-saga/effects").CallEffect<import("@frontegg/rest-api").ISettingsResponse | import("@frontegg/rest-api").IPublicSettingsResponse> | import("redux-saga/effects").PutEffect<{
    payload: Partial<AuthState>;
    type: string;
}>, void, (false & {
    applicationUrl: any;
} & AuthState) | (true & {
    applicationUrl: any;
} & AuthState)>;
export declare function customLoginSagas(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
export declare function customLoginSagasMock(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
