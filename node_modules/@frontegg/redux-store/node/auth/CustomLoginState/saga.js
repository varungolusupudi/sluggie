"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.customLoginEnabled = customLoginEnabled;
exports.customLoginSagas = customLoginSagas;
exports.customLoginSagasMock = customLoginSagasMock;
exports.loadCustomLoginRoutes = loadCustomLoginRoutes;
exports.loadTenantMetadata = loadTenantMetadata;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _restApi = require("@frontegg/rest-api");
var _effects = require("redux-saga/effects");
var _reducer = require("../reducer");
var _utils = require("../utils");
var _utils2 = require("./utils");
var _utils3 = require("../../utils");
var _utils4 = require("../LoginState/utils");
const _excluded = ["callback"],
  _excluded2 = ["callback"];
function* loadTenantMetadata() {
  yield (0, _effects.put)(_reducer.actions.setCustomLoginState({
    loading: true
  }));
  try {
    const tenantMetadata = yield (0, _effects.call)(_restApi.api.metadata.getAdminBoxMetadata);
    yield (0, _effects.put)(_reducer.actions.setCustomLoginState({
      tenantMetadata,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setCustomLoginState({
      loading: false,
      error: (0, _utils3.errorHandler)(e)
    }));
  }
}
function* updateTenantMetadata(_ref) {
  let {
      payload: {
        callback
      }
    } = _ref,
    state = (0, _objectWithoutPropertiesLoose2.default)(_ref.payload, _excluded);
  try {
    yield (0, _effects.put)(_reducer.actions.setCustomLoginState({
      error: null,
      saving: true
    }));
    const requestActions = (0, _utils2.mapMetaDataObjectToActions)(state);
    if (requestActions.length === 0) {
      throw new Error('No changes to update');
    }
    yield (0, _effects.call)(_restApi.api.metadata.updateAdminBoxMetadata, {
      actions: requestActions
    });
    const tenantMetadata = yield (0, _effects.call)(_restApi.api.metadata.getAdminBoxMetadata);
    yield (0, _effects.put)(_reducer.actions.setCustomLoginState({
      tenantMetadata,
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setCustomLoginState({
      error: (0, _utils3.errorHandler)(e, 'No changes to update'),
      saving: false
    }));
    callback == null ? void 0 : callback(null, e);
  }
}
function* customLoginEnabled() {
  var _yield$ContextHolder$, _ContextHolder$getCon, _ContextHolder$getCon2;
  const isAuthenticated = yield (0, _effects.select)(state => state.auth.isAuthenticated);
  if (isAuthenticated) {
    var _select;
    const tenantHasCustomLogin = yield (_select = (0, _effects.select)(({
      auth
    }) => {
      var _auth$tenantsState$ac;
      return (_auth$tenantsState$ac = auth.tenantsState.activeTenant) == null ? void 0 : _auth$tenantsState$ac.hasCustomLogin;
    })) != null ? _select : false;
    return tenantHasCustomLogin;
  }
  const resolvedTenant = (_yield$ContextHolder$ = yield (_ContextHolder$getCon = _restApi.ContextHolder.getContext()) == null ? void 0 : (_ContextHolder$getCon2 = _ContextHolder$getCon.tenantResolver) == null ? void 0 : _ContextHolder$getCon2.call(_ContextHolder$getCon)) == null ? void 0 : _yield$ContextHolder$.tenant;
  return !!resolvedTenant;
}
function* loadCustomLoginRoutes() {
  try {
    var _getSearchParamsFromU;
    const isCustomLoginEnabled = yield (0, _effects.call)(customLoginEnabled);
    if (!isCustomLoginEnabled) {
      return;
    }
    const isAuthenticated = yield (0, _effects.select)(state => state.auth.isAuthenticated);
    const {
      getSettings,
      getPublicSettings
    } = _restApi.api.accountSettings;
    const {
      applicationUrl
    } = yield (0, _effects.call)(isAuthenticated ? getSettings : getPublicSettings);
    if (!applicationUrl) {
      return;
    }
    const {
      routes
    } = yield (0, _effects.select)(state => state.auth);
    const searchParams = (_getSearchParamsFromU = (0, _utils4.getSearchParamsFromUrl)(applicationUrl)) != null ? _getSearchParamsFromU : '';
    yield (0, _effects.put)(_reducer.actions.setState({
      routes: (0, _extends2.default)({}, routes, {
        customLoginAuthenticatedUrl: applicationUrl,
        customLoginUrl: routes.loginUrl + searchParams
      })
    }));
    yield (0, _effects.put)(_reducer.actions.setCustomLoginState({
      customLoginSearchParams: searchParams != null ? searchParams : undefined
    }));
  } catch {}
}
function* customLoginSagas() {
  yield (0, _effects.takeLeading)(_reducer.actions.loadTenantMetadata, loadTenantMetadata);
  yield (0, _effects.takeLeading)(_reducer.actions.updateTenantMetadata, updateTenantMetadata);
}

// /*********************************
//  *  Preview Sagas
//  *********************************/

function* loadCustomLoginStateMock() {
  yield (0, _effects.put)(_reducer.actions.setCustomLoginState({
    loading: true
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setCustomLoginState({
    loading: false
  }));
}
function* updateCustomLoginMetadataMock(_ref2) {
  let {
      payload: {
        callback
      }
    } = _ref2,
    payload = (0, _objectWithoutPropertiesLoose2.default)(_ref2.payload, _excluded2);
  yield (0, _effects.put)(_reducer.actions.setCustomLoginState({
    loading: true,
    error: null
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setCustomLoginState({
    loading: false,
    error: null
  }));
  callback == null ? void 0 : callback(true);
}
function* customLoginSagasMock() {
  yield (0, _effects.takeLeading)(_reducer.actions.loadTenantMetadata, loadCustomLoginStateMock);
  yield (0, _effects.takeLeading)(_reducer.actions.updateTenantMetadata, updateCustomLoginMetadataMock);
}